# Experiment 5C: Time Series Analysis on Glucose Levels
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima.model import ARIMA

# Load the time-stamped dataset
diabetes_data = pd.read_csv("diabetes9.csv")

# Preview
print(diabetes_data.head())

# Plot raw time series
plt.figure(figsize=(12,5))
plt.plot(diabetes_data['Glucose'], label="Glucose")
plt.xlabel("Index"); plt.ylabel("Glucose Level")
plt.title("Glucose Time Series")
plt.legend(); plt.show()

# Decompose into trend, seasonal, residual
decomposition = seasonal_decompose(diabetes_data['Glucose'], model='additive', period=30)
fig, axes = plt.subplots(3,1, figsize=(12,8))
decomposition.trend.plot(ax=axes[0], title="Trend")
decomposition.seasonal.plot(ax=axes[1], title="Seasonality")
decomposition.resid.plot(ax=axes[2], title="Residuals")
plt.tight_layout(); plt.show()

# 7-day moving average smoothing
diabetes_data['Glucose_MA7'] = diabetes_data['Glucose'].rolling(window=7).mean()
plt.figure(figsize=(12,5))
plt.plot(diabetes_data['Glucose'], alpha=0.5, label="Original")
plt.plot(diabetes_data['Glucose_MA7'],  label="7-Day MA")
plt.title("Moving Average Smoothing"); plt.legend(); plt.show()

# ARIMA forecasting
train_size = int(len(diabetes_data) * 0.8)
train, test = diabetes_data['Glucose'][:train_size], diabetes_data['Glucose'][train_size:]
model = ARIMA(train, order=(5,1,0))  # adjust p,d,q as needed
fitted = model.fit()
forecast = fitted.forecast(steps=len(test))

plt.figure(figsize=(12,5))
plt.plot(test.values,   label="Actual")
plt.plot(forecast.values, label="Forecast")
plt.xlabel("Index"); plt.ylabel("Glucose Level")
plt.title("ARIMA Forecast vs Actual"); plt.legend(); plt.show()
